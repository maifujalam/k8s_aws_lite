0. Doc: https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-minikube-raft
1. Initialize vault:
kubectl -n vault exec vault-0 -- vault operator init \
    -key-shares=1 \
    -key-threshold=1 \
    -format=json > cluster-keys.json

2. Get the unseal key: jq -r ".unseal_keys_b64[]" cluster-keys.json
3. Create unseal key variable: VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" cluster-keys.json)
4. Unseal vault on vault-0 pod: kubectl -n vault exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY
5. Join the vault-1: kubectl -n vault exec -it vault-1 -- vault operator raft join http://vault-0.vault-internal:8200
6. Join the vault-2: kubectl -n vault exec -it vault-2 -- vault operator raft join http://vault-0.vault-internal:8200
7. Unseal the vault-1 pod: kubectl -n vault exec -it vault-1 -- vault operator unseal $VAULT_UNSEAL_KEY
8. Unseal the vault-2 pod: kubectl -n vault exec -it vault-2 -- vault operator unseal $VAULT_UNSEAL_KEY

Debug:-
9. Debug vault conn: kubectl -n vault exec -it vault-1 -- curl -v http://vault-0.vault-internal:8200/v1/sys/health
10. Vault status: kubectl -n vault exec -it vault-0 -- vault status -address=http://127.0.0.1:8200
11. nslookup kubernetes.default
12. nslookup vault-0.vault-internal


Set Secret in Vault:
Doc: https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-minikube-raft#set-a-secret-in-vault
1. jq -r ".root_token" cluster-keys.json
2. Start interactive shell of vault-0: kubectl -n vault exec --stdin=true --tty=true vault-0 -- /bin/sh
3. login to vault: vault login
4. Pass the root key: jq -r ".root_token" cluster-keys.json
5. Enable kv2 secret engine: vault secrets enable -path=secret kv-v2

Vault Auto unseal:
1. helm -n vault uninstall vault && kubectl delete ns vault --force
2. Create secret in vault for aws:- kubectl -n vault create secret generic vault --from-literal=AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
--from-literal=AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  It have permission of read s3,read and write route 53
  vault AWS KMS key id: mrk-7c617c064271405b84d791ce7079110a
3. Vault Initialize:-
  Initialize vault on vault-0 pod: kubectl -n vault exec vault-0 -- vault operator init -recovery-shares=1 -recovery-threshold=1


Vault reset:
1. Delete ns: kubectl delete ns vault
2. Create vault aws secret: kubectl -n vault create secret generic vault --from-literal=AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
--from-literal=AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
3. Initialize vault: kubectl -n vault exec vault-0 -- vault operator init   -recovery-shares=1   -recovery-threshold=1  > cluster-keys.json
4. Get root login token: cat cluster-keys.json
5. Login to

Enable App ROle:-
1. vault login with root token: vault login <toot_token>
2. Enable app role: vault auth enable approle
3. Create role: vault write auth/approle/role/argocd-role \
                    token_type=batch \
                    secret_id_ttl=10m \
                    token_ttl=20m \
                    token_max_ttl=30m \
                    secret_id_num_uses=40
4. Read the created role: vault read auth/approle/role/argocd-role
5. Get a RoleID issued against the AppRole: vault read auth/approle/role/argocd-role/role-id
6. Get a SecretID issued against the AppRole: vault write -f auth/approle/role/argocd-role/secret-id
