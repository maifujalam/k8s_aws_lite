pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: "v1"
            kind: "Pod"
            metadata:
              labels:
                jenkins/jenkins-jenkins-agent: "true"
                jenkins/label: "jenkins-jenkins-agent"
                kubernetes.jenkins.io/controller: "http___jenkins_jenkins_svc_cluster_local_8080x"
              namespace: "jenkins"
            spec:
              containers:
              - args:
                env:
                - name: "JENKINS_TUNNEL"
                  value: "jenkins-agent.jenkins.svc.cluster.local:50000"
                - name: "REMOTING_OPTS"
                  value: "-noReconnectAfter 1d"
                - name: "JENKINS_AGENT_WORKDIR"
                  value: "/home/jenkins/agent"
                - name: "JENKINS_URL"
                  value: "http://jenkins.jenkins.svc.cluster.local:8080/"
                image: "docker.io/skmaifujalam/jenkins-agent:5"
                imagePullPolicy: "IfNotPresent"
                name: "jnlp"
                resources:
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                tty: false
                volumeMounts:
                - mountPath: "/home/jenkins/agent"
                  name: "workspace-volume"
                  readOnly: false
                workingDir: "/home/jenkins/agent"
              nodeSelector:
                kubernetes.io/os: "linux"
              restartPolicy: "Never"
              serviceAccountName: "default"
              volumes:
              - emptyDir:
                  medium: ""
                name: "workspace-volume"
            '''
        }
    }
    environment {
        HELM_CHART_DIR = 'helm-chart-directory'
        HELM_VALUES_FILE = 'values.yaml'
    }
    parameters {
        string(name: 'GIT_REPO_NAME', defaultValue: 'https://github.com/maifujalam/k8s_aws_lite.git', description: 'Enter the git remote name.')
        string(name: 'GIT_BRANCH_NAME', defaultValue: 'main', description: 'Enter the branch name to pull from.')
        string(name: 'ARGO_APP_FOLDER_PATH', defaultValue: 'k8s/v1.32.2/argocdApplication', description: 'Enter the folder path name of Argocd Apps.')
        string(name: 'ARGO_APP_NAME',defaultValue: 'evicted-pod-cleaner', description: 'Enter ArgoCD App Name to deploy.Example:- evicted-pod-cleaner')
        string(name: 'ARGO_APP_VERSION', defaultValue: '1.0.7',description: 'Enter ArgoCD App Version to deploy.Example:- 1.0.1')
    }
    stages {
        stage('Update argocd application') {
            steps {
                script {
                     dir("${params.ARGO_APP_FOLDER_PATH}") {
                            echo "Folder of ArgoCD Apps: ${params.CHART_FOLDER_PATH}";
                            def app_file = sh(script: "find . -maxdepth 1 -type f -iname '${params.ARGO_APP_NAME}*'", returnStdout: true).trim()
                            echo "Application File:- ${app_file}"
                            try {
                                // def output_yq = sh(script: "yq -i .spec.source.targetRevision='${params.ARGO_APP_VERSION}'" '${app_file}'", returnStdout: true).trim()
                                  def cat1=sh(script: "cat '${app_file}'", returnStdout: true).trim()
                                  echo "Before Patching:- \n$cat1}"
                                  sh """
                                      git checkout "${params.GIT_BRANCH_NAME}"
                                      yq -i '.spec.source.targetRevision="'"${params.ARGO_APP_VERSION}"'"' ${app_file}
                                  """
                                  def cat_file=sh(script: "cat ${app_file}", returnStdout: true).trim()
                                  echo "After Patching:- \n${cat_file}"
                            } catch (Exception e) {
                                error("Version upgrade error ${e}")
                            }
                     }
                }
            }
        }

        stage('Push to Git') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "GIT_CRED", usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    sh """
                        git config --global user.email "sk.maifujalam@gmail.com"
                        git config --global user.name "${GIT_USER}"
                        git remote set-url origin https://${GIT_USER}:${GIT_TOKEN}@github.com/maifujalam/k8s_aws_lite.git
                        git add .
                        git commit -m "Edited with Jenkins pipeline"
                        git push -u origin main
                    """
                }
            }
        }

        stage('Sync Argocd Application') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    echo "Syncing Argo CD"

                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished"
        }
        failure {
            echo "Pipeline failed"
        }
        success {
            echo "Helm chart build successful"
        }
    }
}
