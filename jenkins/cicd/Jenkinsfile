pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: "v1"
            kind: "Pod"
            metadata:
              labels:
                jenkins/jenkins-jenkins-agent: "true"
                jenkins/label: "jenkins-jenkins-agent"
                kubernetes.jenkins.io/controller: "http___jenkins_jenkins_svc_cluster_local_8080x"
              namespace: "jenkins"
            spec:
              containers:
              - args:
                env:
                - name: "JENKINS_TUNNEL"
                  value: "jenkins-agent.jenkins.svc.cluster.local:50000"
                - name: "REMOTING_OPTS"
                  value: "-noReconnectAfter 1d"
                - name: "JENKINS_AGENT_WORKDIR"
                  value: "/home/jenkins/agent"
                - name: "JENKINS_URL"
                  value: "http://jenkins.jenkins.svc.cluster.local:8080/"
                image: "docker.io/skmaifujalam/jenkins-agent:5"
                imagePullPolicy: "IfNotPresent"
                name: "jnlp"
                resources:
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                tty: false
                volumeMounts:
                - mountPath: "/home/jenkins/agent"
                  name: "workspace-volume"
                  readOnly: false
                workingDir: "/home/jenkins/agent"
              nodeSelector:
                kubernetes.io/os: "linux"
              restartPolicy: "Never"
              serviceAccountName: "default"
              volumes:
              - emptyDir:
                  medium: ""
                name: "workspace-volume"
            '''
        }
    }
    environment {
        HELM_CHART_DIR = 'helm-chart-directory'
        HELM_VALUES_FILE = 'values.dev.yaml'
        APP_NAME     = ""
        APP_VERSION  = ""
        BUILD_NUMBER = ""
        TARGET_VERSION = ""
    }
    parameters {
        string(name: 'GIT_REPO_NAME', defaultValue: 'https://github.com/maifujalam/k8s_aws_lite.git', description: 'Enter the git remote name.')
        string(name: 'GIT_BRANCH_NAME', defaultValue: 'main', description: 'Enter the branch name to pull from.')
        string(name: 'APP_FOLDER_PATH', defaultValue: 'k8s/v1.32.2/manifests/hello-kubernetes', description: 'Enter the folder path name of Apps.')
    }
    stages {
        stage('Update üîß Application') {
            steps {
                script {
                    dir("${params.APP_FOLDER_PATH}") {
                        echo "Application Folder: ${params.APP_FOLDER_PATH}"

                        def chartFile = sh(
                            script: 'test -f Chart.yaml && echo Chart.yaml || (test -f Chart.yml && echo Chart.yml)',
                            returnStdout: true
                        ).trim()

                        if (!chartFile) {
                            error("‚ùå No Chart.yaml or Chart.yml found in workspace")
                        }

                        echo "Using chart file: ${chartFile}"
                        def appName = ""
                        def appVersion = ""
                        try {
                            appName = sh(script: "yq", returnStdout: true).trim()
                            appVersion = sh(script: "yq eval -r '.version' Chart.yaml", returnStdout: true).trim()
                        } catch (Exception e) {
                            error "Failed to extract name/version from ${chartFile}: ${e.message}"
                        }
                        def uname = sh(script: "uname -s", returnStdout: true).trim()
                        def kernel = sh(script: "uname -r", returnStdout: true).trim()
                        echo "OS: ${uname}, Kernel: ${kernel}"

                        env.APP_NAME = "${appName}"
                        env.APP_VERSION = "${appVersion}"

//                         def versionParts = env.APP_VERSION.tokenize('-')
                        echo "Using ${env.APP_NAME} app version: ${env.APP_VERSION}"
                        env.APP_VERSION = versionParts[0]
                        env.APP_BUILD   = versionParts.size() > 1 ? versionParts[1] : ""
                        def build_no = sh(script: "date +%Y%m%d%H%M", returnStdout: true).trim()
                        env.BUILD_NUMBER ="${env.BUILD_NUMBER}"
                        env.TARGET_VERSION = "${env.APP_VERSION}-${env.BUILD_NUMBER}"

                        echo "‚úÖ APP_NAME: ${env.APP_NAME}"
                        echo "‚úÖ APP_VERSION: ${env.APP_VERSION}"
                        echo "‚úÖ APP_BUILD: ${env.APP_BUILD}"
                        echo "‚úÖ BUILD_NUMBER: ${env.BUILD_NUMBER}"
                        echo "‚úÖ TARGET_VERSION: ${env.TARGET_VERSION}"

                        // Optional: Patch Chart.yaml with new version
                        try {
                            def before = sh(script: "cat ${chartFile}", returnStdout: true).trim()
                            echo "Before Patching:\n${before}"

                            sh """
                                yq -i '.version = "${env.TARGET_VERSION}"' ${chartFile}
                            """

                            def after = sh(script: "cat ${chartFile}", returnStdout: true).trim()
                            echo "After Patching:\n${after}"
                        } catch (Exception e) {
                            error("Version upgrade error: ${e}")
                        }
                    }
                }
            }
        }

        stage('Package üì¶ Helm Chart') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    echo "Package Helm Chart"
                }
            }
        }

        stage('Push üì§ Helm Chart') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    echo "Push Helm Chart"
                }
            }
        }

        stage('Push üì§ to Git') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "GIT_CRED", usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    sh """
                        git config --global user.email "sk.maifujalam@gmail.com"
                        git config --global user.name "${GIT_USER}"
                        git remote set-url origin https://${GIT_USER}:${GIT_TOKEN}@github.com/maifujalam/k8s_aws_lite.git
                        git add .
                        git commit -m "Edited with Jenkins pipeline"
                        git push -u origin main
                    """
                }
            }
        }

        stage('Deploy üöÄ Argocd Application') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    echo "Deploying ArgoCD App"
                    kubectl apply -f *-app.yaml
                    echo "App Deployed.Sync Argo CD Now"
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished"
        }
        failure {
            echo "‚ùå Pipeline failed"
        }
        success {
            echo "‚úÖ Helm chart build successful"
        }
    }
}
