pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                jenkins/jenkins-jenkins-agent: "true"
                jenkins/label: "jenkins-jenkins-agent"
              namespace: jenkins
            spec:
              containers:
              - name: jnlp
                image: docker.io/skmaifujalam/jenkins-agent:5
                imagePullPolicy: IfNotPresent
                env:
                - name: JENKINS_TUNNEL
                  value: jenkins-agent.jenkins.svc.cluster.local:50000
                - name: REMOTING_OPTS
                  value: -noReconnectAfter 1d
                - name: JENKINS_AGENT_WORKDIR
                  value: /home/jenkins/agent
                - name: JENKINS_URL
                  value: http://jenkins.jenkins.svc.cluster.local:8080/
                resources:
                  limits:
                    memory: 512Mi
                    cpu: 500m
                  requests:
                    memory: 256Mi
                    cpu: 250m
                volumeMounts:
                - name: workspace-volume
                  mountPath: /home/jenkins/agent
              volumes:
              - name: workspace-volume
                emptyDir: {}
              restartPolicy: Never
              serviceAccountName: default
            '''
        }
    }

    environment {
        HELM_CHART_DIR   = 'helm-chart-directory'
        HELM_VALUES_FILE = 'values.dev.yaml'
        APP_NAME         = ''
        APP_VERSION      = ''
        BUILD_NUMBER     = ''
        TARGET_VERSION   = ''
    }

    parameters {
        string(name: 'GIT_REPO_NAME', defaultValue: 'https://github.com/maifujalam/k8s_aws_lite.git', description: 'Git repo URL')
        string(name: 'GIT_BRANCH_NAME', defaultValue: 'main', description: 'Branch to work with')
        string(name: 'APP_FOLDER_PATH', defaultValue: 'k8s/v1.32.2/manifests/hello-kubernetes', description: 'App folder path')
    }

    stages {
        stage('Update üîß Application') {
            steps {
                script {
                    dir("${params.APP_FOLDER_PATH}") {
                        echo "üìÇ Application Folder: ${params.APP_FOLDER_PATH}"

                        def chartFile = sh(
                            script: 'test -f Chart.yaml && echo Chart.yaml || (test -f Chart.yml && echo Chart.yml)',
                            returnStdout: true
                        ).trim()

                        if (!chartFile) {
                            error("‚ùå No Chart.yaml or Chart.yml found in workspace")
                        }

                        echo "üìÑ Using chart file: ${chartFile}"
                        def appName = sh(script: "yq eval -r '.name' ${chartFile}", returnStdout: true).trim()
                        def appVersion = sh(script: "yq eval -r '.version' ${chartFile}", returnStdout: true).trim()

                        if (!appName || !appVersion) {
                            error "‚ùå Chart file missing 'name' or 'version'"
                        }

                        env.APP_NAME    = appName
                        env.APP_VERSION = appVersion

                        echo "‚úÖ App Name: ${env.APP_NAME} | App Version: ${env.APP_VERSION}"
                    }
                }
            }
        }

        stage('Package üì¶ Helm Chart') {
            when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }
            steps {
                script {
                    echo "üì¶ Packaging Helm Chart"
                    echo "‚úÖ App: ${env.APP_NAME} | Version: ${env.APP_VERSION}"
                    // Example: sh "helm package . -d /tmp"
                }
            }
        }

        stage('Push üì§ Helm Chart') {
            when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }
            steps {
                script {
                    echo "üì§ Pushing Helm Chart (Placeholder)"
                    // Example: sh "helm push /tmp/${env.APP_NAME}-${env.APP_VERSION}.tgz my-repo"
                }
            }
        }

        stage('Push üì§ to Git') {
            when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }
            steps {
                withCredentials([usernamePassword(credentialsId: "GIT_CRED", usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    script {
                        sh """
                            git config user.email "sk.maifujalam@gmail.com"
                            git config user.name "${GIT_USER}"

                            git checkout ${params.GIT_BRANCH_NAME}

                            git add .

                            if ! git diff --cached --quiet; then
                              git commit -m "Edited with Jenkins pipeline: Build #${env.BUILD_NUMBER}"
                              git push https://${GIT_USER}:${GIT_TOKEN}@github.com/maifujalam/k8s_aws_lite.git ${params.GIT_BRANCH_NAME}
                            else
                              echo "‚úÖ No changes to commit"
                            fi
                        """
                    }
                }
            }
        }

        stage('Deploy üöÄ Argocd Application') {
            when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }
            steps {
                script {
                    echo "üöÄ Deploying ArgoCD App"
                    sh "kubectl apply -f *-app.yaml"
                    echo "‚úÖ App Deployed. Sync in Argo CD if needed."
                }
            }
        }
    }

    post {
        always {
            echo
